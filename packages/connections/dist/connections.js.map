{"version":3,"file":"connections.js","sources":["../src/components/ConnectionsListView.tsx","../src/pages/ConnectionsPage.tsx","../src/pages/NewConnectionPage.tsx","../src/app/ConnectionsApp.tsx"],"sourcesContent":["import { IConnection } from \"@syndesis/models\";\nimport { ConnectionCard, ConnectionsGrid } from '@syndesis/ui';\nimport { IListViewToolbarProps, ListViewToolbar } from \"@syndesis/ui\";\nimport { getConnectionIcon } from \"@syndesis/utils\";\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport interface IConnectionsListViewProps extends IListViewToolbarProps {\n  match: any;\n  loading: boolean;\n  connections: IConnection[];\n}\n\nexport class ConnectionsListView extends React.Component<\n  IConnectionsListViewProps\n> {\n  public render() {\n    return (\n      <>\n        <ListViewToolbar {...this.props}>\n          <div className=\"form-group\">\n            <Link\n              to={`${this.props.match}/new`}\n              className={'btn btn-primary'}\n            >\n              Create Connection\n            </Link>\n          </div>\n        </ListViewToolbar>\n        <div className={'container-fluid'}>\n          <ConnectionsGrid loading={this.props.loading}>\n            {this.props.connections.map((c, index) => (\n              <ConnectionCard\n                name={c.name}\n                description={c.description || ''}\n                icon={getConnectionIcon(c, process.env.PUBLIC_URL)}\n                key={index}\n              />\n            ))}\n          </ConnectionsGrid>\n        </div>\n      </>\n    );\n  }\n}\n","import { WithConnections } from \"@syndesis/api\";\nimport { IConnection } from \"@syndesis/models\";\nimport { IActiveFilter, IFilterType, ISortType } from \"@syndesis/ui\";\nimport { IListViewToolbarAbstractComponent, ListViewToolbarAbstractComponent } from \"@syndesis/utils\";\nimport * as React from 'react';\nimport { ConnectionsListView } from \"../components/ConnectionsListView\";\n\nfunction getFilteredAndSortedConnections(\n  connections: IConnection[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedConnections = connections;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedConnections = filteredAndSortedConnections.filter(\n      (c: IConnection) => c.name.toLowerCase().includes(valueToLower)\n    );\n  });\n\n  filteredAndSortedConnections = filteredAndSortedConnections.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      return left.name.localeCompare(right.name);\n    }\n  );\n\n  return filteredAndSortedConnections;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: 'Filter by Name',\n  title: 'Name'\n} as IFilterType;\n\nconst filterTypes = [filterByName];\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: 'Name'\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName];\n\nexport default class ConnectionsPage extends ListViewToolbarAbstractComponent<\n  {},\n  IListViewToolbarAbstractComponent\n> {\n  public state = {\n    activeFilters: [] as IActiveFilter[],\n    currentFilterType: filterByName,\n    currentSortType: sortByName.title,\n    currentValue: '',\n    filterCategory: null,\n    isSortAscending: true\n  };\n\n  public render() {\n    return (\n      <WithConnections>\n        {({ data, loading, hasData }) => {\n          const filteredAndSortedConnections = getFilteredAndSortedConnections(\n            data.items,\n            this.state.activeFilters,\n            this.state.currentSortType,\n            this.state.isSortAscending\n          );\n          return (\n            <ConnectionsListView\n              loading={!hasData && loading}\n              match={'TODO'}\n              connections={filteredAndSortedConnections}\n              filterTypes={filterTypes}\n              sortTypes={sortTypes}\n              resultsCount={filteredAndSortedConnections.length}\n              {...this.state}\n              onUpdateCurrentValue={this.onUpdateCurrentValue}\n              onValueKeyPress={this.onValueKeyPress}\n              onFilterAdded={this.onFilterAdded}\n              onSelectFilterType={this.onSelectFilterType}\n              onFilterValueSelected={this.onFilterValueSelected}\n              onRemoveFilter={this.onRemoveFilter}\n              onClearFilters={this.onClearFilters}\n              onToggleCurrentSortDirection={\n                this.onToggleCurrentSortDirection\n              }\n              onUpdateCurrentSortType={this.onUpdateCurrentSortType}\n            />\n          );\n        }}\n      </WithConnections>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport default class NewConnectionPage extends React.Component {\n  public render() {\n    return <p>todo</p>;\n  }\n}\n","import * as React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport ConnectionsPage from \"../pages/ConnectionsPage\";\nimport NewConnectionPage from \"../pages/NewConnectionPage\";\n\nexport interface IConnectionsAppProps {\n  mountpoint: string;\n}\n\nexport class ConnectionsApp extends React.Component<IConnectionsAppProps> {\n  public render() {\n    return (\n      <Switch>\n        <Route\n          path={this.props.mountpoint}\n          exact={true}\n          component={ConnectionsPage}\n        />\n        <Route\n          path={`${this.props.mountpoint}/new`}\n          exact={true}\n          component={NewConnectionPage}\n        />\n      </Switch>\n    );\n  }\n}\n"],"names":["tslib_1.__extends","ConnectionsListView","React.createElement","ListViewToolbar","this","props","className","Link","to","match","ConnectionsGrid","loading","connections","map","c","index","ConnectionCard","name","description","icon","getConnectionIcon","process","env","PUBLIC_URL","key","React.Component","filterByName","filterType","id","placeholder","title","filterTypes","sortByName","isNumeric","sortTypes","_this","activeFilters","currentFilterType","currentSortType","currentValue","filterCategory","isSortAscending","ConnectionsPage","WithConnections","_a","hasData","filteredAndSortedConnections","forEach","filter","valueToLower","value","toLowerCase","includes","sort","miA","miB","localeCompare","getFilteredAndSortedConnections","items","state","resultsCount","length","onUpdateCurrentValue","onValueKeyPress","onFilterAdded","onSelectFilterType","onFilterValueSelected","onRemoveFilter","onClearFilters","onToggleCurrentSortDirection","onUpdateCurrentSortType","ListViewToolbarAbstractComponent","NewConnectionPage","ConnectionsApp","Switch","Route","path","mountpoint","exact","component"],"mappings":"mrBAaA,4DA+BA,OA/ByCA,OAGhCC,mBAAP,WACE,OACEC,gCACEA,gBAACC,uBAAoBC,KAAKC,OACxBH,uBAAKI,UAAU,cACbJ,gBAACK,QACCC,GAAOJ,KAAKC,MAAMI,aAClBH,UAAW,0CAMjBJ,uBAAKI,UAAW,mBACdJ,gBAACQ,mBAAgBC,QAASP,KAAKC,MAAMM,SAClCP,KAAKC,MAAMO,YAAYC,IAAI,SAACC,EAAGC,GAAU,OACxCb,gBAACc,kBACCC,KAAMH,EAAEG,KACRC,YAAaJ,EAAEI,aAAe,GAC9BC,KAAMC,oBAAkBN,EAAGO,QAAQC,IAAIC,YACvCC,IAAKT,aAvBoBU,aCmBzC,IAAMC,EAAe,CACnBC,WAAY,OACZC,GAAI,OACJC,YAAa,iBACbC,MAAO,QAGHC,EAAc,CAACL,GAEfM,EAAa,CACjBJ,GAAI,OACJK,WAAW,EACXH,MAAO,QAGHI,EAAyB,CAACF,iBAEhC,aAAA,qDAISG,QAAQ,CACbC,cAAe,GACfC,kBAAmBX,EACnBY,gBAAiBN,EAAWF,MAC5BS,aAAc,GACdC,eAAgB,KAChBC,iBAAiB,KAuCrB,OAjD6CzC,OAapC0C,mBAAP,WAAA,WACE,OACExC,gBAACyC,uBACE,SAACC,OAAQjC,YAASkC,YACXC,EA3DhB,SACElC,EACAwB,EACAE,EACAG,GAEA,IAAIK,EAA+BlC,EAgBnC,OAfAwB,EAAcW,QAAQ,SAACC,GACrB,IAAMC,EAAeD,EAAOE,MAAMC,cAClCL,EAA+BA,EAA6BE,OAC1D,SAAClC,GAAmB,OAAAA,EAAEG,KAAKkC,cAAcC,SAASH,OAItDH,EAA+BA,EAA6BO,KAC1D,SAACC,EAAKC,GAGJ,OAFad,EAAkBa,EAAMC,GAEzBtC,KAAKuC,eADHf,EAAkBc,EAAMD,GACDrC,QAyCIwC,QAC9BC,MACLvB,EAAKwB,MAAMvB,cACXD,EACAA,EAAKwB,MAAMlB,iBAEb,OACEvC,gBAACD,KACCU,SAAUkC,GAAWlC,EACrBF,MAAO,OACPG,YAAakC,EACbf,YAAaA,EACbG,UAAWA,EACX0B,aAAcd,EAA6Be,QACvC1B,EAAKwB,OACTG,qBAAsB3B,EAAK2B,qBAC3BC,gBAAiB5B,EAAK4B,gBACtBC,cAAe7B,EAAK6B,cACpBC,mBAAoB9B,EAAK8B,mBACzBC,sBAAuB/B,EAAK+B,sBAC5BC,eAAgBhC,EAAKgC,eACrBC,eAAgBjC,EAAKiC,eACrBC,6BACElC,EAAKkC,6BAEPC,wBAAyBnC,EAAKmC,iCA1CCC,kDC/C7C,4DAIA,OAJ+CvE,OACtCwE,mBAAP,WACE,OAAOtE,qCAFoCuB,2BCO/C,4DAiBA,OAjBoCzB,OAC3ByE,mBAAP,WACE,OACEvE,gBAACwE,cACCxE,gBAACyE,SACCC,KAAMxE,KAAKC,MAAMwE,WACjBC,OAAO,EACPC,UAAWrC,IAEbxC,gBAACyE,SACCC,KAASxE,KAAKC,MAAMwE,kBACpBC,OAAO,EACPC,UAAWP,SAZe/C"}