{"version":3,"file":"DashboardPage.js","sourceRoot":"","sources":["../../src/pages/DashboardPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { WithConnections, WithIntegrationsMetrics, WithMonitoredIntegrations } from \"@syndesis/api\";\nimport { IIntegration, IIntegrationsMetricsTopIntegration, IMonitoredIntegration } from \"@syndesis/models\";\nimport * as React from 'react';\nimport { Dashboard } from \"../components\";\n\nexport interface IIntegrationCountsByState {\n  Error: number;\n  Pending: number;\n  Published: number;\n  Unpublished: number;\n}\n\nexport function getIntegrationsCountsByState(\n  integrations: IMonitoredIntegration[]\n): IIntegrationCountsByState {\n  return integrations.reduce(\n    (counts, mi) => {\n      const stateCount = counts[mi.integration.currentState] || 0;\n      return {\n        ...counts,\n        [mi.integration.currentState]: stateCount + 1\n      };\n    },\n    {\n      Error: 0,\n      Pending: 0,\n      Published: 0,\n      Unpublished: 0\n    } as IIntegrationCountsByState\n  );\n}\n\nexport function getTimestamp(integration: IIntegration) {\n  return integration.updatedAt !== 0\n    ? integration.updatedAt\n    : integration.createdAt;\n}\n\nexport function byTimestamp(a: IIntegration, b: IIntegration) {\n  const aTimestamp = getTimestamp(a);\n  const bTimestamp = getTimestamp(b);\n  return bTimestamp - aTimestamp;\n}\n\nexport function getRecentlyUpdatedIntegrations(\n  integrations: IMonitoredIntegration[]\n): IIntegration[] {\n  return integrations\n    .map(mi => mi.integration)\n    .sort(byTimestamp)\n    .slice(0, 5);\n}\n\nexport function getTopIntegrations(\n  integrations: IMonitoredIntegration[],\n  topIntegrations: IIntegrationsMetricsTopIntegration = {}\n): IMonitoredIntegration[] {\n  const topIntegrationsArray = Object.keys(topIntegrations)\n    .map(key => {\n      return {\n        count: topIntegrations[key],\n        id: key\n      } as any;\n    })\n    .sort((a, b) => {\n      return b.count - a.count;\n    });\n\n  return integrations\n    .sort((miA, miB) => byTimestamp(miA.integration, miB.integration))\n    .sort((a, b) => {\n      const index = topIntegrationsArray.findIndex(\n        i => i.id === b.integration.id\n      );\n      return index === -1 ? topIntegrationsArray.length + 1 : index;\n    })\n    .reverse()\n    .slice(0, 5);\n}\n\nexport default () => (\n  <WithMonitoredIntegrations>\n    {({ data: integrationsData, hasData: hasIntegrations }) => (\n      <WithIntegrationsMetrics>\n        {({ data: metricsData, hasData: hasMetrics }) => (\n          <WithConnections>\n            {({ data: connectionsData, hasData: hasConnections }) => {\n              const integrationStatesCount = getIntegrationsCountsByState(\n                integrationsData.items\n              );\n              return (\n                <Dashboard\n                  integrationsLoaded={hasIntegrations}\n                  connectionsLoaded={hasConnections}\n                  metricsLoaded={hasMetrics}\n                  integrationsCount={integrationsData.totalCount}\n                  integrationsErrorCount={integrationStatesCount.Error}\n                  connections={connectionsData.items}\n                  connectionsCount={connectionsData.totalCount}\n                  metrics={metricsData}\n                  runningIntegrations={integrationStatesCount.Published}\n                  stoppedIntegrations={integrationStatesCount.Unpublished}\n                  pendingIntegrations={integrationStatesCount.Pending}\n                  recentlyUpdatedIntegrations={getRecentlyUpdatedIntegrations(\n                    integrationsData.items\n                  )}\n                  topIntegrations={getTopIntegrations(\n                    integrationsData.items,\n                    metricsData.topIntegrations\n                  )}\n                />\n              );\n            }}\n          </WithConnections>\n        )}\n      </WithIntegrationsMetrics>\n    )}\n  </WithMonitoredIntegrations>\n);\n"]}