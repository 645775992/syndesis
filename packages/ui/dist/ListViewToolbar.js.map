{"version":3,"file":"ListViewToolbar.js","sourceRoot":"","sources":["../src/ListViewToolbar.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AACtE,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAwD/B,MAAM,OAAO,eAAgB,SAAQ,KAAK,CAAC,SAAgC;IAA3E;;QAoDS,gBAAW,GAAG,GAAG,EAAE;YACxB,MAAM,EAAE,iBAAiB,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACvD,IAAI,CAAC,iBAAiB,EAAE;gBACtB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,iBAAiB,CAAC,UAAU,KAAK,QAAQ,EAAE;gBAC7C,OAAO,CACL,oBAAC,MAAM,CAAC,aAAa,IACnB,YAAY,EAAE,iBAAiB,CAAC,YAAY,EAC5C,YAAY,EAAE,YAAY,EAC1B,qBAAqB,EAAE,IAAI,CAAC,KAAK,CAAC,qBAAqB,GACvD,CACH,CAAC;aACH;iBAAM;gBACL,OAAO,CACL,oBAAC,WAAW,IACV,IAAI,EAAE,iBAAiB,CAAC,UAAU,EAClC,KAAK,EAAE,YAAY,EACnB,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAC1C,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,EACzC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,GACtC,CACH,CAAC;aACH;QACH,CAAC,CAAC;IACJ,CAAC;IA5EQ,MAAM;QACX,OAAO,CACL,oBAAC,OAAO;YACN,oBAAC,MAAM;gBACL,oBAAC,MAAM,CAAC,YAAY,IAClB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EACnC,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,KAAK,EACrD,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,GACnD;gBACD,IAAI,CAAC,WAAW,EAAE,CACZ;YACT,oBAAC,IAAI;gBACH,oBAAC,IAAI,CAAC,YAAY,IAChB,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EAC3C,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,uBAAuB,GACtD;gBACF,oBAAC,IAAI,CAAC,iBAAiB,IACrB,SAAS,EAAE,KAAK,EAChB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,EACvC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,4BAA4B,GAChD,CACG;YACP,oBAAC,OAAO,CAAC,YAAY,QAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAwB;YAClE,oBAAC,OAAO,CAAC,OAAO;gBACd;oBAAK,IAAI,CAAC,KAAK,CAAC,YAAY;+BAAc;gBACzC,IAAI,CAAC,KAAK,CAAC,aAAa;oBACvB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,IAAI,CACrC;oBACE,oBAAC,MAAM,CAAC,WAAW,0BAAqC;oBACxD,oBAAC,MAAM,CAAC,IAAI,QACT,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAC3B,CAAC,IAAmB,EAAE,KAAK,EAAE,EAAE,CAAC,CAC9B,oBAAC,MAAM,CAAC,IAAI,IACV,GAAG,EAAE,KAAK,EACV,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EACnC,UAAU,EAAE,IAAI;wBAEf,IAAI,CAAC,KAAK;;wBAAG,IAAI,CAAC,KAAK,CACZ,CACf,CACF,CACW;oBACd,2BAAG,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,wBAAuB,CAC3D,CACJ,CACa,CACV,CACX,CAAC;IACJ,CAAC;CA2BF","sourcesContent":["import { Filter, FormControl, Sort, Toolbar } from 'patternfly-react';\nimport * as React from 'react';\n\nexport interface IFilterValue {\n  id: string;\n  title: string;\n}\n\nexport interface IFilterType {\n  id: string;\n  filterType: 'select' | 'text' | 'number';\n  filterValues?: IFilterValue[];\n  placeholder: string;\n  title: string;\n}\n\nexport interface ISortType {\n  id: string;\n  isNumeric: boolean;\n  title: string;\n}\n\nexport interface IActiveFilter {\n  title: string;\n  value: string;\n}\n\nexport interface IListViewToolbarProps {\n  activeFilters: IActiveFilter[];\n  filterTypes: IFilterType[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  filterCategory: any;\n  isSortAscending: boolean;\n  resultsCount: number;\n  sortTypes: ISortType[];\n\n  onUpdateCurrentValue(event: Event): void;\n\n  onValueKeyPress(keyEvent: KeyboardEvent): void;\n\n  onFilterAdded(title: string, value: string): void;\n\n  onSelectFilterType(filterType: IFilterType): void;\n\n  onFilterValueSelected(filterValue: { id: string; title: string }): void;\n\n  onRemoveFilter(filter: IActiveFilter): void;\n\n  onClearFilters(event: React.MouseEvent<HTMLAnchorElement>): void;\n\n  onToggleCurrentSortDirection(): void;\n\n  onUpdateCurrentSortType(sortType: string): void;\n}\n\nexport class ListViewToolbar extends React.Component<IListViewToolbarProps> {\n  public render() {\n    return (\n      <Toolbar>\n        <Filter>\n          <Filter.TypeSelector\n            filterTypes={this.props.filterTypes}\n            currentFilterType={this.props.currentFilterType.title}\n            onFilterTypeSelected={this.props.onSelectFilterType}\n          />\n          {this.renderInput()}\n        </Filter>\n        <Sort>\n          <Sort.TypeSelector\n            sortTypes={this.props.sortTypes}\n            currentSortType={this.props.currentSortType}\n            onSortTypeSelected={this.props.onUpdateCurrentSortType}\n          />\n          <Sort.DirectionSelector\n            isNumeric={false}\n            isAscending={this.props.isSortAscending}\n            onClick={this.props.onToggleCurrentSortDirection}\n          />\n        </Sort>\n        <Toolbar.RightContent>{this.props.children}</Toolbar.RightContent>\n        <Toolbar.Results>\n          <h5>{this.props.resultsCount} Results</h5>\n          {this.props.activeFilters &&\n            this.props.activeFilters.length > 0 && (\n              <>\n                <Filter.ActiveLabel>Active Filters:</Filter.ActiveLabel>\n                <Filter.List>\n                  {this.props.activeFilters.map(\n                    (item: IActiveFilter, index) => (\n                      <Filter.Item\n                        key={index}\n                        onRemove={this.props.onRemoveFilter}\n                        filterData={item}\n                      >\n                        {item.title}={item.value}\n                      </Filter.Item>\n                    )\n                  )}\n                </Filter.List>\n                <a onClick={this.props.onClearFilters}>Clear All Filters</a>\n              </>\n            )}\n        </Toolbar.Results>\n      </Toolbar>\n    );\n  }\n\n  public renderInput = () => {\n    const { currentFilterType, currentValue } = this.props;\n    if (!currentFilterType) {\n      return null;\n    }\n    if (currentFilterType.filterType === 'select') {\n      return (\n        <Filter.ValueSelector\n          filterValues={currentFilterType.filterValues}\n          currentValue={currentValue}\n          onFilterValueSelected={this.props.onFilterValueSelected}\n        />\n      );\n    } else {\n      return (\n        <FormControl\n          type={currentFilterType.filterType}\n          value={currentValue}\n          placeholder={currentFilterType.placeholder}\n          onChange={this.props.onUpdateCurrentValue}\n          onKeyPress={this.props.onValueKeyPress}\n        />\n      );\n    }\n  };\n}\n"]}