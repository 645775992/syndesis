{"version":3,"file":"ListViewToolbarAbstractComponent.js","sourceRoot":"","sources":["../src/ListViewToolbarAbstractComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IActiveFilter, IFilterType } from \"./ListViewToolbar\";\n\nexport interface IListViewToolbarAbstractComponent {\n  activeFilters: IActiveFilter[];\n  currentFilterType: IFilterType;\n  currentSortType: string;\n  currentValue: any;\n  filterCategory: any;\n  isSortAscending: boolean;\n}\n\nexport abstract class ListViewToolbarAbstractComponent<\n  P,\n  S extends IListViewToolbarAbstractComponent\n> extends React.Component<P, S> {\n  public onUpdateCurrentValue = (event: Event) => {\n    this.setState({ currentValue: (event.target as HTMLInputElement).value });\n  };\n\n  public onValueKeyPress = (keyEvent: KeyboardEvent) => {\n    const { currentValue, currentFilterType } = this.state;\n\n    if (keyEvent.key === 'Enter' && currentValue && currentValue.length > 0) {\n      this.setState({ currentValue: '' });\n      this.onFilterAdded(currentFilterType.title, currentValue);\n      keyEvent.stopPropagation();\n      keyEvent.preventDefault();\n    }\n  };\n\n  public onFilterAdded = (title: string, value: string) => {\n    const { activeFilters } = this.state;\n    this.setState({\n      activeFilters: [\n        ...activeFilters,\n        {\n          title,\n          value\n        } as IActiveFilter\n      ]\n    });\n  };\n\n  public onSelectFilterType = (filterType: IFilterType) => {\n    const { currentFilterType } = this.state;\n    if (currentFilterType !== filterType) {\n      this.setState({ currentValue: '', currentFilterType: filterType });\n    }\n  };\n\n  public onFilterValueSelected = (filterValue: {\n    id: string;\n    title: string;\n  }) => {\n    const { currentFilterType } = this.state;\n\n    this.setState({ currentValue: filterValue.title });\n    if (filterValue) {\n      this.onFilterAdded(currentFilterType.title, filterValue.title);\n    }\n  };\n\n  public onRemoveFilter = (filter: IActiveFilter) => {\n    const { activeFilters } = this.state;\n\n    const index = activeFilters.indexOf(filter);\n    if (index > -1) {\n      const updated = [\n        ...activeFilters.slice(0, index),\n        ...activeFilters.slice(index + 1)\n      ];\n      this.setState({ activeFilters: updated });\n    }\n  };\n\n  public onClearFilters = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n    this.setState({ activeFilters: [] });\n  };\n\n  public onToggleCurrentSortDirection = () => {\n    const { isSortAscending } = this.state;\n\n    this.setState({ isSortAscending: !isSortAscending });\n  };\n\n  public onUpdateCurrentSortType = (sortType: string) => {\n    const { currentSortType } = this.state;\n\n    if (currentSortType !== sortType) {\n      this.setState({\n        currentSortType: sortType,\n        isSortAscending: true\n      });\n    }\n  };\n}\n"]}