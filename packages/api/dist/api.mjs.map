{"version":3,"file":"api.mjs","sources":["../src/ApiContext.tsx","../src/Rest.tsx","../src/Stream.tsx","../src/SyndesisRest.tsx","../src/WithIntegrations.tsx","../src/WithMonitoredIntegrations.tsx","../src/WithIntegrationsMetrics.tsx","../src/WithConnections.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport interface IApiContext {\n  apiUri: string;\n  token: string | null;\n}\n\nexport const ApiContextDefaultValue = {\n  apiUri: 'http://example.com',\n  token: null\n} as IApiContext;\n\nexport const ApiContext = React.createContext<IApiContext>(\n  ApiContextDefaultValue\n);\n","import * as React from 'react';\nimport equal from 'react-fast-compare';\n\nexport interface IHeader {\n  [s: string]: string;\n}\n\nexport interface IFetch {\n  url: string;\n  method: 'GET' | 'PUT';\n  headers?: IHeader;\n  body?: any;\n  contentType?: string;\n}\n\nexport function callFetch({\n  url,\n  method,\n  headers = {},\n  body,\n  contentType = 'application/json; charset=utf-8'\n}: IFetch) {\n  return fetch(url, {\n    body: body ? JSON.stringify(body) : undefined,\n    cache: 'no-cache',\n    credentials: 'include',\n    headers: {\n      'Content-Type': contentType,\n      ...headers\n    },\n    method,\n    mode: 'cors',\n    redirect: 'follow',\n    referrer: 'no-referrer'\n  });\n}\n\nexport interface ISaveProps {\n  url: string;\n  data: any;\n}\n\nexport interface IRestState<T> {\n  data: T;\n  error: boolean;\n  errorMessage?: string;\n  hasData: boolean;\n  loading: boolean;\n\n  read(): Promise<void>;\n\n  save(props: ISaveProps): void;\n}\n\nexport interface IRestProps<T> {\n  autoload?: boolean;\n  baseUrl: string;\n  poll?: number;\n  url: string;\n  headers?: IHeader;\n  contentType?: string;\n  defaultValue: T;\n\n  children(props: IRestState<T>): any;\n}\n\nexport class Rest<T> extends React.Component<IRestProps<T>, IRestState<T>> {\n  public static defaultProps = {\n    autoload: true\n  };\n\n  public pollingTimer?: number;\n\n  public constructor(props: IRestProps<T>) {\n    super(props);\n    this.state = {\n      data: this.props.defaultValue,\n      error: false,\n      hasData: false,\n      loading: true,\n      read: this.read,\n      save: this.onSave\n    };\n    this.poller = this.poller.bind(this);\n  }\n\n  public async componentDidMount() {\n    if (this.props.autoload) {\n      this.read();\n      if (this.props.poll) {\n        this.startPolling();\n      }\n    }\n  }\n\n  public async componentDidUpdate(prevProps: IRestProps<T>) {\n    if (prevProps.url !== this.props.url) {\n      this.read();\n    }\n\n    if (prevProps.poll !== this.props.poll) {\n      if (this.props.poll) {\n        this.startPolling();\n      } else {\n        this.stopPolling();\n      }\n    }\n  }\n\n  public componentWillUnmount() {\n    this.stopPolling();\n  }\n\n  public shouldComponentUpdate(\n    nextProps: IRestProps<T>,\n    nextState: IRestState<T>\n  ): boolean {\n    return !equal(this.props, nextProps) || !equal(this.state, nextState);\n  }\n\n  public render() {\n    return this.props.children(this.state);\n  }\n\n  public async read() {\n    try {\n      this.setState({\n        loading: true\n      });\n      const response = await callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      let data;\n      if (\n        !this.props.contentType ||\n        this.props.contentType.indexOf('application/json') === 0\n      ) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n      this.setState({\n        data,\n        hasData: true,\n        loading: false\n      });\n    } catch (e) {\n      this.setState({\n        data: this.props.defaultValue,\n        error: true,\n        errorMessage: e.message,\n        hasData: false,\n        loading: false\n      });\n    }\n  }\n\n  public async onSave({ url, data }: ISaveProps) {\n    this.setState({\n      loading: true\n    });\n    try {\n      const response = await callFetch({\n        body: data,\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'PUT',\n        url: `${this.props.baseUrl}${url || this.props.url}`\n      });\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      setTimeout(() => this.read(), 5000); // TODO: figure out why this is needed\n    } catch (e) {\n      this.setState({\n        error: true,\n        errorMessage: e.message,\n        loading: false\n      });\n    }\n  }\n\n  public startPolling() {\n    this.stopPolling();\n    this.pollingTimer = setInterval(this.poller, this.props.poll);\n  }\n\n  public poller() {\n    if (!this.state.loading) {\n      this.read();\n    }\n  }\n\n  public stopPolling() {\n    if (this.pollingTimer) {\n      clearInterval(this.pollingTimer);\n      this.pollingTimer = undefined;\n    }\n  }\n}\n","import { callFetch, IRestProps, Rest } from './Rest';\n\nexport class Stream extends Rest<string[]> {\n  protected reader: ReadableStreamReader | undefined;\n\n  public async componentDidUpdate(prevProps: IRestProps<string[]>) {\n    if (prevProps.url !== this.props.url) {\n      if (this.reader) {\n        this.reader.cancel();\n      }\n      this.read();\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.reader) {\n      this.reader.cancel();\n    }\n  }\n\n  public read = async () => {\n    try {\n      this.setState({\n        loading: true\n      });\n\n      callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`\n      })\n        .then(response => response.body)\n        .then(body => {\n          this.reader = body!.getReader();\n          const textDecoder = new TextDecoder('utf-8');\n          const pushData = ({\n            done,\n            value\n          }: {\n            done: boolean;\n            value: Uint8Array;\n          }) => {\n            if (done) {\n              this.setState({\n                loading: false\n              });\n            } else {\n              this.setState({\n                data: [...(this.state.data || []), textDecoder.decode(value)]\n              });\n\n              this.reader!.read().then(pushData);\n            }\n          };\n\n          this.reader.read().then(pushData);\n        });\n    } catch (e) {\n      this.setState({\n        error: true,\n        errorMessage: e.message,\n        loading: false\n      });\n    }\n  };\n\n  public onSave = async () => {\n    throw new Error(`Can't save from a stream`);\n  };\n}\n","import * as React from 'react';\nimport { ApiContext } from \"./ApiContext\";\nimport { IRestState, Rest } from './Rest';\nimport { Stream } from './Stream';\n\nexport interface ISyndesisRestProps<T> {\n  autoload?: boolean;\n  contentType?: string;\n  poll?: number;\n  url: string;\n  stream?: boolean;\n  defaultValue: T;\n\n  children(props: IRestState<T>): any;\n}\n\nexport class SyndesisRest<T> extends React.Component<ISyndesisRestProps<T>> {\n  public render() {\n    const { url, stream, ...props } = this.props;\n\n    const RestOrStream = stream ? Stream : Rest;\n\n    return (\n      <ApiContext.Consumer>\n        {({ apiUri, token }) => (\n          <RestOrStream\n            baseUrl={apiUri}\n            url={url}\n            {...props}\n            headers={{\n              'SYNDESIS-XSRF-TOKEN': 'awesome',\n              'X-Forwarded-Access-Token': `${token}`,\n              'X-Forwarded-User': 'admin'\n            }}\n          />\n        )}\n      </ApiContext.Consumer>\n    );\n  }\n}\n","import { IIntegration } from \"@syndesis/models\";\nimport * as React from 'react';\nimport { IRestState } from \"./Rest\";\nimport { SyndesisRest } from \"./SyndesisRest\";\n\nexport interface IIntegrationsResponse {\n  items: IIntegration[];\n  totalCount: number;\n}\n\nexport interface IWithIntegrationsProps {\n  children(props: IRestState<IIntegrationsResponse>): any;\n}\n\nexport class WithIntegrations extends React.Component<IWithIntegrationsProps> {\n  public render() {\n    return (\n      <SyndesisRest<IIntegrationsResponse>\n        url={'/api/v1/integrations'}\n        poll={5000}\n        defaultValue={{\n          items: [],\n          totalCount: 0\n        }}\n      >\n        {response => this.props.children(response)}\n      </SyndesisRest>\n    );\n  }\n}\n","import { IIntegration, IIntegrationMonitoring, IMonitoredIntegration } from \"@syndesis/models\";\nimport * as React from 'react';\nimport { IRestState } from \"./Rest\";\nimport { SyndesisRest } from \"./SyndesisRest\";\nimport { WithIntegrations } from \"./WithIntegrations\";\n\nexport interface IMonitoredIntegrationsResponse {\n  items: IMonitoredIntegration[];\n  totalCount: number;\n}\n\nexport interface IWithMonitoredIntegrationsProps {\n  children(props: IRestState<IMonitoredIntegrationsResponse>): any;\n}\n\nexport class WithMonitoredIntegrations extends React.Component<\n  IWithMonitoredIntegrationsProps\n> {\n  public render() {\n    return (\n      <WithIntegrations>\n        {({ data: integrations, ...props }) => (\n          <SyndesisRest<IIntegrationMonitoring[]>\n            url={'/api/v1/monitoring/integrations'}\n            poll={5000}\n            defaultValue={[]}\n          >\n            {({ data: monitorings }) => {\n              return this.props.children({\n                ...props,\n                data: {\n                  items: integrations.items.map(\n                    (i: IIntegration): IMonitoredIntegration => ({\n                      integration: i,\n                      monitoring: monitorings.find(\n                        (m: IIntegrationMonitoring) => m.integrationId === i.id\n                      )\n                    })\n                  ),\n                  totalCount: integrations.totalCount\n                }\n              });\n            }}\n          </SyndesisRest>\n        )}\n      </WithIntegrations>\n    );\n  }\n}\n","import { IIntegrationsMetrics } from \"@syndesis/models\";\nimport * as React from 'react';\nimport { IRestState } from \"./Rest\";\nimport { SyndesisRest } from \"./SyndesisRest\";\n\nexport interface IWithIntegrationsMetricsProps {\n  children(props: IRestState<IIntegrationsMetrics>): any;\n}\n\nexport class WithIntegrationsMetrics extends React.Component<\n  IWithIntegrationsMetricsProps\n> {\n  public render() {\n    return (\n      <SyndesisRest<IIntegrationsMetrics>\n        url={'/api/v1/metrics/integrations'}\n        poll={5000}\n        defaultValue={{\n          errors: 0,\n          lastProcessed: 0,\n          messages: 0,\n          metricsProvider: '',\n          start: 0,\n          topIntegrations: {}\n        }}\n      >\n        {response => this.props.children(response)}\n      </SyndesisRest>\n    );\n  }\n}\n","import { IConnection } from \"@syndesis/models\";\nimport * as React from 'react';\nimport { IRestState } from \"./Rest\";\nimport { SyndesisRest } from \"./SyndesisRest\";\n\nexport interface IConnectionsResponse {\n  items: IConnection[];\n  totalCount: number;\n}\n\nexport interface IWithConnectionsProps {\n  children(props: IRestState<IConnectionsResponse>): any;\n}\n\nexport class WithConnections extends React.Component<IWithConnectionsProps> {\n  public render() {\n    return (\n      <SyndesisRest<IConnectionsResponse>\n        url={'/api/v1/connections'}\n        poll={5000}\n        defaultValue={{\n          items: [],\n          totalCount: 0\n        }}\n      >\n        {response => this.props.children(response)}\n      </SyndesisRest>\n    );\n  }\n}\n"],"names":["ApiContextDefaultValue","apiUri","token","ApiContext","React.createContext","callFetch","_a","method","_b","headers","body","_c","contentType","fetch","JSON","stringify","undefined","cache","credentials","Content-Type","mode","redirect","referrer","props","_super","_this","state","data","defaultValue","error","hasData","loading","read","save","onSave","poller","bind","tslib_1.__extends","Rest","this","autoload","poll","startPolling","prevProps","url","stopPolling","nextProps","nextState","equal","children","setState","baseUrl","response","ok","Error","statusText","indexOf","json","text","errorMessage","e_1","message","setTimeout","e_2","pollingTimer","setInterval","clearInterval","React.Component","then","reader","getReader","textDecoder","TextDecoder","pushData","value","decode","e","Stream","cancel","SyndesisRest","stream","RestOrStream","React.createElement","Consumer","SYNDESIS-XSRF-TOKEN","X-Forwarded-Access-Token","X-Forwarded-User","WithIntegrations","items","totalCount","WithMonitoredIntegrations","integrations","monitorings","map","i","integration","monitoring","find","m","integrationId","id","WithIntegrationsMetrics","errors","lastProcessed","messages","metricsProvider","start","topIntegrations","WithConnections"],"mappings":"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"}