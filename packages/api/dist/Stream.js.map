{"version":3,"file":"Stream.js","sourceRoot":"","sources":["../src/Stream.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAc,IAAI,EAAE,MAAM,QAAQ,CAAC;AAErD,MAAM,OAAO,MAAO,SAAQ,IAAc;IAA1C;;QAkBS,SAAI,GAAG,KAAK,IAAI,EAAE;YACvB,IAAI;gBACF,IAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,IAAI;iBACd,CAAC,CAAC;gBAEH,SAAS,CAAC;oBACR,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW;oBACnC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;oBAC3B,MAAM,EAAE,KAAK;oBACb,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;iBAC9C,CAAC;qBACC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;qBAC/B,IAAI,CAAC,IAAI,CAAC,EAAE;oBACX,IAAI,CAAC,MAAM,GAAG,IAAK,CAAC,SAAS,EAAE,CAAC;oBAChC,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;oBAC7C,MAAM,QAAQ,GAAG,CAAC,EAChB,IAAI,EACJ,KAAK,EAIN,EAAE,EAAE;wBACH,IAAI,IAAI,EAAE;4BACR,IAAI,CAAC,QAAQ,CAAC;gCACZ,OAAO,EAAE,KAAK;6BACf,CAAC,CAAC;yBACJ;6BAAM;4BACL,IAAI,CAAC,QAAQ,CAAC;gCACZ,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;6BAC9D,CAAC,CAAC;4BAEH,IAAI,CAAC,MAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;yBACpC;oBACH,CAAC,CAAC;oBAEF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC;aACN;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,QAAQ,CAAC;oBACZ,KAAK,EAAE,IAAI;oBACX,YAAY,EAAE,CAAC,CAAC,OAAO;oBACvB,OAAO,EAAE,KAAK;iBACf,CAAC,CAAC;aACJ;QACH,CAAC,CAAC;QAEK,WAAM,GAAG,KAAK,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC,CAAC;IACJ,CAAC;IAjEQ,KAAK,CAAC,kBAAkB,CAAC,SAA+B;QAC7D,IAAI,SAAS,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YACpC,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;aACtB;YACD,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;IACH,CAAC;IAEM,oBAAoB;QACzB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;SACtB;IACH,CAAC;CAoDF","sourcesContent":["import { callFetch, IRestProps, Rest } from './Rest';\n\nexport class Stream extends Rest<string[]> {\n  protected reader: ReadableStreamReader | undefined;\n\n  public async componentDidUpdate(prevProps: IRestProps<string[]>) {\n    if (prevProps.url !== this.props.url) {\n      if (this.reader) {\n        this.reader.cancel();\n      }\n      this.read();\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.reader) {\n      this.reader.cancel();\n    }\n  }\n\n  public read = async () => {\n    try {\n      this.setState({\n        loading: true\n      });\n\n      callFetch({\n        contentType: this.props.contentType,\n        headers: this.props.headers,\n        method: 'GET',\n        url: `${this.props.baseUrl}${this.props.url}`\n      })\n        .then(response => response.body)\n        .then(body => {\n          this.reader = body!.getReader();\n          const textDecoder = new TextDecoder('utf-8');\n          const pushData = ({\n            done,\n            value\n          }: {\n            done: boolean;\n            value: Uint8Array;\n          }) => {\n            if (done) {\n              this.setState({\n                loading: false\n              });\n            } else {\n              this.setState({\n                data: [...(this.state.data || []), textDecoder.decode(value)]\n              });\n\n              this.reader!.read().then(pushData);\n            }\n          };\n\n          this.reader.read().then(pushData);\n        });\n    } catch (e) {\n      this.setState({\n        error: true,\n        errorMessage: e.message,\n        loading: false\n      });\n    }\n  };\n\n  public onSave = async () => {\n    throw new Error(`Can't save from a stream`);\n  };\n}\n"]}