{"version":3,"file":"IntegrationsPage.js","sourceRoot":"","sources":["../../src/pages/IntegrationsPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { WithConnections, WithMonitoredIntegrations } from \"@syndesis/api\";\nimport { IConnection, IMonitoredIntegration } from \"@syndesis/models\";\nimport { IActiveFilter, IFilterType, ISortType, IListViewToolbarAbstractComponent, ListViewToolbarAbstractComponent } from \"@syndesis/ui\";\nimport * as React from 'react';\nimport { IntegrationsListView } from \"../components/IntegrationsListView\";\n\nfunction getFilteredAndSortedIntegrations(\n  integrations: IMonitoredIntegration[],\n  activeFilters: IActiveFilter[],\n  currentSortType: string,\n  isSortAscending: boolean\n) {\n  let filteredAndSortedIntegrations = integrations;\n  activeFilters.forEach((filter: IActiveFilter) => {\n    const valueToLower = filter.value.toLowerCase();\n    filteredAndSortedIntegrations = filteredAndSortedIntegrations.filter(\n      (mi: IMonitoredIntegration) => {\n        if (filter.title === 'Name') {\n          return mi.integration.name.toLowerCase().includes(valueToLower);\n        }\n        if (filter.title === 'Connection') {\n          const connectionNames = mi.integration.flows.reduce(\n            (acc, flow) => [\n              ...acc,\n              ...flow.steps\n                .filter(s => s.connection)\n                .map(s => s.connection.name.toLowerCase())\n            ],\n            [] as string[]\n          );\n          return connectionNames.reduce(\n            (found, n) => found || n.includes(valueToLower),\n            false\n          );\n        }\n        return false;\n      }\n    );\n  });\n\n  filteredAndSortedIntegrations = filteredAndSortedIntegrations.sort(\n    (miA, miB) => {\n      const left = isSortAscending ? miA : miB;\n      const right = isSortAscending ? miB : miA;\n      if (currentSortType === 'Name') {\n        return left.integration.name.localeCompare(right.integration.name);\n      }\n      return left.integration.currentState.localeCompare(\n        right.integration.currentState\n      );\n    }\n  );\n\n  return filteredAndSortedIntegrations;\n}\n\nconst filterByName = {\n  filterType: 'text',\n  id: 'name',\n  placeholder: 'Filter by Name',\n  title: 'Name'\n} as IFilterType;\n\nconst filterByConnection = {\n  filterType: 'select',\n  filterValues: [],\n  id: 'connection',\n  placeholder: 'Filter by Connection',\n  title: 'Connection'\n};\n\nfunction getFilterTypes(connections: IConnection[]): IFilterType[] {\n  return [\n    filterByName,\n    {\n      ...filterByConnection,\n      filterValues: connections.map(c => ({\n        id: c.id,\n        title: c.name\n      }))\n    } as IFilterType\n  ];\n}\n\nconst sortByName = {\n  id: 'name',\n  isNumeric: false,\n  title: 'Name'\n} as ISortType;\n\nconst sortByStatus = {\n  id: 'status',\n  isNumeric: false,\n  title: 'Status'\n} as ISortType;\n\nconst sortTypes: ISortType[] = [sortByName, sortByStatus];\n\nexport default class IntegrationsPage extends ListViewToolbarAbstractComponent<\n  {},\n  IListViewToolbarAbstractComponent\n> {\n  public state = {\n    activeFilters: [] as IActiveFilter[],\n    currentFilterType: filterByName,\n    currentSortType: sortByName.title,\n    currentValue: '',\n    filterCategory: null,\n    isSortAscending: true\n  };\n\n  public render() {\n    return (\n      <WithMonitoredIntegrations>\n        {({ data: integrationsData, loading, hasData }) => (\n          <WithConnections>\n            {({ data: connectionsData }) => {\n              const filteredAndSortedIntegrations = getFilteredAndSortedIntegrations(\n                integrationsData.items,\n                this.state.activeFilters,\n                this.state.currentSortType,\n                this.state.isSortAscending\n              );\n              return (\n                <IntegrationsListView\n                  loading={!hasData && loading}\n                  match={'TODO'}\n                  monitoredIntegrations={filteredAndSortedIntegrations}\n                  filterTypes={getFilterTypes(connectionsData.items)}\n                  sortTypes={sortTypes}\n                  resultsCount={filteredAndSortedIntegrations.length}\n                  {...this.state}\n                  onUpdateCurrentValue={this.onUpdateCurrentValue}\n                  onValueKeyPress={this.onValueKeyPress}\n                  onFilterAdded={this.onFilterAdded}\n                  onSelectFilterType={this.onSelectFilterType}\n                  onFilterValueSelected={this.onFilterValueSelected}\n                  onRemoveFilter={this.onRemoveFilter}\n                  onClearFilters={this.onClearFilters}\n                  onToggleCurrentSortDirection={\n                    this.onToggleCurrentSortDirection\n                  }\n                  onUpdateCurrentSortType={this.onUpdateCurrentSortType}\n                />\n              );\n            }}\n          </WithConnections>\n        )}\n      </WithMonitoredIntegrations>\n    );\n  }\n}\n"]}