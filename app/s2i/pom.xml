<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (C) 2016 Red Hat, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.syndesis</groupId>
    <artifactId>syndesis-parent</artifactId>
    <version>1.9-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>io.syndesis.s2i</groupId>
  <artifactId>s2i</artifactId>
  <version>1.9-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>S2I</name>

  <properties>
    <s2i.sample-generation.skip>false</s2i.sample-generation.skip>
    <s2i.local-repo-generation.skip>false</s2i.local-repo-generation.skip>
    <license.dir>${project.basedir}/src/main/resources/licenses</license.dir>
    <license.output.dir>${project.build.directory}/licenses</license.output.dir>
    <image.build.workdir>${project.basedir}/target/generated-sources/docker</image.build.workdir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.syndesis.server</groupId>
      <artifactId>server-builder-image-generator</artifactId>
      <version>${project.version}</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>basepom.default</id>
            <phase />
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>basepom.default</id>
            <phase />
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <id>basepom.default</id>
            <phase />
          </execution>
          <execution>
            <id>attach-javadocs</id>
            <phase />
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>basepom.default</id>
            <phase />
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>addrepository</id>
      <activation>
        <property>
          <name>addrepository</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/repository.xml</descriptor>
              </descriptors>
            </configuration>
            <executions>
              <execution>
                <id>make-repository-assembly</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>image</id>
      <activation>
        <property>
          <name>::image</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  Copies the settings_local.xml used by
                  server-builder-image-generator below and the settings.xml
                  that's baked into the S2I image.
                -->
                <id>copy-settings-xml</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${image.build.workdir}</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/main/resources</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  Generates a Maven project containing all connectors.
                  When built by Maven this project will download all
                  dependencies needed for the S2I image will be
                  downloaded. Maven build is performed below.
                -->
                <id>default-cli</id>
                <goals>
                  <goal>java</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <mainClass>org.springframework.boot.loader.JarLauncher</mainClass>
                  <arguments>
                    <argument>--to=${image.build.workdir}/m2/project</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-invoker-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  Runs the Maven build on the generated project to
                  gather all the dependencies we wish to bake into
                  the S2I image.
                -->
                <id>run-generated-project</id>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <goals>
                    <goal>dependency:go-offline</goal>
                  </goals>
                  <projectsDirectory>${image.build.workdir}/m2</projectsDirectory>
                  <localRepositoryPath>${image.build.workdir}/m2/repo</localRepositoryPath>
                  <!-- invoker plugin requires us to specify a settings.xml file here
                    we use the one that only has a single local repository, one used
                    by the Maven that's executing this plugin
                  -->
                  <settingsFile>${image.build.workdir}/settings_local.xml</settingsFile>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  We need to remove some of the tracking files Maven puts
                  in the repository we created above. Otherwise Maven 
                  will try to resolve using the repositories we used to
                  download these (namely the local repository used above
                  in the `settings_local.xml`), that will not resolve
                  to anything meaningful when we do the integration POD
                  S2I build.
                -->
                <id>remove-repository-tracking-files</id>
                <phase>package</phase>
                <goals>
                  <goal>clean</goal>
                </goals>
                <configuration>
                  <excludeDefaultDirectories>true</excludeDefaultDirectories>
                  <filesets>
                    <fileset>
                      <directory>${image.build.workdir}/m2/repo</directory>
                      <followSymlinks>false</followSymlinks>
                      <includes>
                        <include>**/_remote.repositories</include>
                        <include>**/resolver-status.properties</include>
                      </includes>
                    </fileset>
                  </filesets>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>fabric8-maven-plugin</artifactId>
            <executions>
              <execution>
                <!--
                  Builds the S2I image.
                -->
                <id>exec</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
                <configuration>
                  <!-- Important here, otherwise fmp silently ignores the build config -->
                  <skipBuildPom>false</skipBuildPom>
                    <!-- Create a plain Docker image -->
                  <buildStrategy>docker</buildStrategy>
                  <images>
                    <image>
                      <name>${image.s2i}</name>
                      <build>
                        <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
                        <contextDir>${image.build.workdir}</contextDir>
                      </build>
                    </image>
                  </images>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>

    </profile>

    <profile>
      <id>generate-licenses-xml</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>license-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>aggregate-download-licenses</goal>
                </goals>
                <phase>generate-resources</phase>
                <configuration>
                  <licensesOutputDirectory>${license.dir}/licenses</licensesOutputDirectory>
                  <licensesOutputFile>${license.dir}/licenses.xml</licensesOutputFile>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>mavenMirror</id>
      <activation>
        <property>
          <name>mavenMirror</name>
        </property>
      </activation>
      <properties>
        <mavenMirrorOf>external:*</mavenMirrorOf>
      </properties>
    </profile>
    <!-- Build by PNC -->
    <profile>
      <id>with-proxy</id>
      <activation>
        <property>
          <name>proxy-server</name>
        </property>
      </activation>
      <properties>
        <s2i.sample-generation.skip>true</s2i.sample-generation.skip>
        <s2i.local-repo-generation.skip>true</s2i.local-repo-generation.skip>
      </properties>
    </profile>
  </profiles>
</project>
